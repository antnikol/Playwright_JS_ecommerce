name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  run-test:
    name: "Run Playwright tests"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y allure
          npm install
          npm install -g allure-commandline
          npm install playwright allure-commandline allure-playwright --save-dev express

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Start Express server for mock test
        run: |
          echo "
          import express from 'express';
          const app = express();
          const port = 3000;

          app.use(express.static('playwright'));

          app.get('/api/productsList', (req, res) => {
            res.json({ products: [{ name: 'Mocked Product' }] });
          });

          app.listen(port, () => {
            console.log('Mock server is running at http://localhost:' + port);
          });
          " > server.js

          nohup node server.js &

      - name: Wait for the server to be ready
        run: |
          echo "Waiting for the mock server to start..."
          until curl --silent --head --fail http://localhost:3000/api/productsList; do
            echo "Waiting for server..."
            sleep 1
          done
          echo "Mock server is up!"

      - name: Run Playwright tests (including the one with mock server)
        run: |
          npx playwright test --reporter=allure-playwright

      - name: Check Allure results
        run: |
          if [ ! -d "./allure-results" ] || [ -z "$(ls -A ./allure-results)" ]; then
            echo "No Allure results found. Skipping report generation."
            exit 1
          fi

      - name: Check Allure version (to confirm it's installed)
        run: |
          allure --version

      - name: Generate Allure report
        run: |
          if [ ! -d "./allure-results" ] || [ -z "$(ls -A ./allure-results)" ]; then
            echo "No Allure results found. Skipping report generation."
            exit 1
          fi
          allure generate ./allure-results --clean

      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: ./allure-report

      - name: Publish Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results
          path: ./allure-results

      - name: Upload Playwright screenshots (on failure)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-screenshots
          path: ./playwright/screenshots

      - name: Create gh-pages branch if not exists
        run: |
          if ! git ls-remote --exit-code origin gh-pages; then
            git checkout --orphan gh-pages
            git rm -rf .  # Clean up the directory
            echo "Placeholder for GitHub Pages" > index.html
            git add index.html
            git commit -m "Initialize gh-pages branch"
            git push origin gh-pages
          fi

      - name: Stash uncommitted changes
        run: |
          git stash --include-untracked

      - name: Clean old Allure report on gh-pages
        run: |
          git fetch origin gh-pages
          git checkout gh-pages
          rm -rf ./*  # Remove old files
          git add .
          git commit -m "Clean old Allure report"
          git push origin gh-pages

      # - name: Configure Git user for authentication
      #   run: |
      #     git config user.name "github-actions[bot]"
      #     git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Clone gh-pages branch and update report
        run: |
          git clone --branch gh-pages --single-branch https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} gh-pages
          rm -rf gh-pages/*
          cp -r ./allure-report/* gh-pages/
          cd gh-pages
          git add .
          git commit -m "Update Allure report"
          git push origin gh-pages
